// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	model "ilanver/internal/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ICategoryRepository is an autogenerated mock type for the ICategoryRepository type
type ICategoryRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *ICategoryRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWithInQuery provides a mock function with given fields: data
func (_m *ICategoryRepository) DeleteWithInQuery(data []int) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *ICategoryRepository) GetAll() ([]model.Category, error) {
	ret := _m.Called()

	var r0 []model.Category
	if rf, ok := ret.Get(0).(func() []model.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *ICategoryRepository) GetByID(id int) (model.Category, error) {
	ret := _m.Called(id)

	var r0 model.Category
	if rf, ok := ret.Get(0).(func(int) model.Category); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubCategories provides a mock function with given fields: id
func (_m *ICategoryRepository) GetSubCategories(id uint) ([]model.Category, error) {
	ret := _m.Called(id)

	var r0 []model.Category
	if rf, ok := ret.Get(0).(func(uint) []model.Category); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: category
func (_m *ICategoryRepository) Insert(category *model.Category) error {
	ret := _m.Called(category)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Category) error); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: category
func (_m *ICategoryRepository) Update(category model.Category) error {
	ret := _m.Called(category)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Category) error); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICategoryRepository creates a new instance of ICategoryRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewICategoryRepository(t testing.TB) *ICategoryRepository {
	mock := &ICategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
