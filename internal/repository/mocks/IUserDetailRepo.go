// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	model "ilanver/internal/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	repository "ilanver/internal/repository"

	testing "testing"
)

// IUserDetailRepo is an autogenerated mock type for the IUserDetailRepo type
type IUserDetailRepo struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: id
func (_m *IUserDetailRepo) GetByID(id uint) (model.UserDetail, error) {
	ret := _m.Called(id)

	var r0 model.UserDetail
	if rf, ok := ret.Get(0).(func(uint) model.UserDetail); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.UserDetail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: detail
func (_m *IUserDetailRepo) Save(detail *model.UserDetail) error {
	ret := _m.Called(detail)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserDetail) error); ok {
		r0 = rf(detail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTx provides a mock function with given fields: db
func (_m *IUserDetailRepo) WithTx(db *gorm.DB) repository.IUserDetailRepo {
	ret := _m.Called(db)

	var r0 repository.IUserDetailRepo
	if rf, ok := ret.Get(0).(func(*gorm.DB) repository.IUserDetailRepo); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.IUserDetailRepo)
		}
	}

	return r0
}

// NewIUserDetailRepo creates a new instance of IUserDetailRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserDetailRepo(t testing.TB) *IUserDetailRepo {
	mock := &IUserDetailRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
